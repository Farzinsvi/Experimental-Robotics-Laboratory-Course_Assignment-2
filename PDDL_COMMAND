rosservice list | grep domain


ask info about domain
request types
rosservice call /rosplan_knowledge_base/domain/types

request predicates
rosservice call /rosplan_knowledge_base/domain/predicates

info about a specific operator
rosservice call /rosplan_knowledge_base/domain/operator_details "name: 'move'"

generate a problem
rosservice call /rosplan_problem_interface/problem_generation_server

check generated pb
/rosplan_problem_interface/problem_instance

check istances
rosservice call /rosplan_knowledge_base/state/instances "type_name: 'robot'"

check grounded predicates
rosservice call /rosplan_knowledge_base/state/propositions "predicate_name: 'at'"
mess: rosplan_knowledge_msgs/GetAttributeService






check goals
rosservice call /rosplan_knowledge_base/state/goals "predicate_name: "
rosplan_knowledge_msgs/GetAttributeService
NOTE: return value is a bool true or false

remove model
rosservice call /rosplan_knowledge_base/clear

update problem
ADD ISTANCES e GROUNDED PREDICATES
rosservice call /rosplan_knowledge_base/update
how fill the msg
rosservice call /rosplan_knowledge_base/update "update_type: 0
knowledge:
knowledge_type: 0
instance_type: 'robot'
instance_name: 'kenny'"

generate a plan
rosservice call /rosplan_planner_interface/planning_server
(BEFORE ALWAYS GENERATE PB)

check the output
rostopic echo /rosplan_planner_interface/planner_output -p
std_msgs/String

action_id: 0
plan_id: 0
name: "move"
parameters: 
  - 
    key: "r"
    value: "sherlock_robot"
  - 
    key: "l1"
    value: "wp0"
  - 
    key: "l2"
    value: "wp1"
duration: 0.0010000000474974513
dispatch_time: 0.0
---


start dispatcher
rosservice call /rosplan_plan_dispatcher/dispatch_plan

check the first action has been dispatched
rostopic echo rosplan_plan_dispatcher/action_dispatch

load ontology
rosrun armor execute it.emarolab.armor.ARMORMainService

catkin_make --only-pkg-with-deps erl2 my_rosplan_interface

catkin_make -DCATKIN_WHITELIST_PACKAGES="" 


rosrun motion_plan go_to_point_action.py

1-rosservice call /rosplan_problem_interface/problem_generation_server
2-rosservice call /rosplan_planner_interface/planning_server
3-rosservice call /rosplan_parsing_interface/parse_plan
4-rosservice call /rosplan_plan_dispatcher/dispatch_plan

autopep8 --in-place --aggressive --aggressive <filename>

what to launch:

roslaunch moveit_assignment demo_gazebo.launch
roslaunch my_erl2 pddl_launcher.launch
rosrun armor execute it.emarolab.armor.ARMORMainService
rosrun my_erl2 ArmorInterface.py

rosrun my_erl2 mv
rosrun erl2 Reasoning.py


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


A4   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

wp1 (3,0) (2.65,0,0) (0.38,0


roslaunch moveit_assignment demo_gazebo.launch
rosrun armor execute it.emarolab.armor.ARMORMainService
roslaunch my_erl2 pddl_launcher.launch
roslaunch my_erl2 Cluedo_game.launch

attributes: 
  - 
    knowledge_type: 1
    initial_time: 
      secs: 146
      nsecs: 256000000
    is_negative: False
    instance_type: ''
    instance_name: ''
    attribute_name: "at"
    values: 
      - 
        key: "l"
        value: "wp1"
      - 
        key: "r"
        value: "sherlock_robot"
    function_value: 0.0
    optimization: ''
    expr: 
      tokens: []
    ineq: 
      comparison_type: 0
      LHS: 
        tokens: []
      RHS: 
        tokens: []
      grounded: False


problemi
1- controllare che un ip sia presa solo una volta
2- finire annuncio al centro
A5 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

A3
      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


                
                id_c=rospy.get_param('ID'+str(erloracle.ID))
                print(id_c)
                if erloracle.key == 'where':
                     if id_c[0]==' ':
                        id_c[0]='where'
                        rospy.set_param('ID'+str(erloracle.ID),id_c)
                     else:
                        _res.success = False
                        print("add hp 0")
                        return _res
                elif erloracle.key == 'what':
                     if id_c[1]==' ':
                        id_c[1]='what'
                        rospy.set_param('ID'+str(erloracle.ID),id_c)
                     else:
                        _res.success = False
                        print("add hp 1")
                        return _res
                else:
                     if id_c[2]==' ':
                        id_c[2]='who'
                        rospy.set_param('ID'+str(erloracle.ID),id_c)
                     else:
                        _res.success = False
                        print("add hp 2")
                        return _res
